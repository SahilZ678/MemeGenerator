{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","style","width","height","padding","position","fontSize","margin","MemeGenerator","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","allMemes","state","allMemeImages","totalNumberOfMemes","Object","keys","length","randomNumber","Math","floor","random","randomMemeImage","values","url","randomImg","topText","bottomText","textColor","fetch","then","response","json","memes","data","console","log","catch","error","className","onSubmit","this","onChange","background","display","color","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wNAeeA,MAbf,WACI,OACI,gCACI,yBACIC,IAAK,iEACLC,IAAM,WACNC,MAAQ,CAACC,MAAO,QAASC,OAAQ,OAAQC,QAAQ,OAAQC,SAAS,cAEtE,uBAAGJ,MAAO,CAACK,SAAS,QAASC,OAAQ,cAArC,oB,0CCkEGC,E,YAzEX,aAAc,IAAD,8BACT,+CAuBJC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAArBC,EADe,EACfA,KAAMC,EADS,EACTA,MACb,EAAKC,SAAL,eACKF,EAAOC,KA3BH,EA+BbE,aAAe,SAACL,GACZA,EAAMM,iBACN,IAAIC,EAAW,EAAKC,MAAMC,cACtBC,EAAqBC,OAAOC,KAAKL,GAAUM,OAC3CC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMN,IAErDQ,EADaP,OAAOQ,OAAOZ,GAAUO,EAAa,GACrBM,IACjC,EAAKhB,SAAS,CACViB,UAAWH,KArCf,EAAKV,MAAO,CACRc,QAAS,GACTC,WAAY,GACZF,UAAW,sDACXZ,cAAe,GACfe,UAAW,OAPN,E,iFAWO,IAAD,OACfC,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACPE,QAAQC,WAAWH,GACnB,EAAKzB,SAAS,CAACK,cAAeoB,OAEjCI,OAAM,SAAAC,GACHH,QAAQC,IAAI,mBAAmBE,Q,+BAwBvC,OACI,6BACI,0BAAMC,UAAU,YAAYC,SAAUC,KAAKhC,cACvC,2CACA,2BAAOF,MAAQkC,KAAK7B,MAAMc,QAASpB,KAAK,UAAUoC,SAAYD,KAAKtC,eACnE,8CACA,2BAAOI,MAAQkC,KAAK7B,MAAMe,WAAYrB,KAAK,aAAaoC,SAAYD,KAAKtC,eACzE,6CACA,4BAAQG,KAAK,YAAYoC,SAAUD,KAAKtC,cACpC,4BAAQI,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,SAEJ,4BAAQZ,MAAQ,CAACgD,WAAY,cAA7B,iBAEJ,6BACA,yBAAKJ,UAAY,SACb,yBAAK9C,IAAMgD,KAAK7B,MAAMa,UAAW/B,IAAK,GAAGC,MAAO,CAACiD,QAAQ,QAAS3C,OAAO,YACzE,wBAAIsC,UAAY,MAAM5C,MAAO,CAACkD,MAAMJ,KAAK7B,MAAMgB,YAAaa,KAAK7B,MAAMc,SACvE,wBAAIa,UAAY,SAAS5C,MAAO,CAACkD,MAAMJ,KAAK7B,MAAMgB,YAAaa,KAAK7B,MAAMe,kB,GAlElEmB,IAAMC,WCanBC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.f7188a18.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header(){\n    return(\n        <header>\n            <img \n                src= \"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \n                alt = \"Problem?\"\n                style= {{width: \"200px\", height: \"auto\", padding:\"20px\", position:\"absolute\"}}\n            />\n            <p style={{fontSize:\"100px\", margin: \"25px auto\"}}>Meme Generator</p>\n        </header>\n    )\n}\n\nexport default Header","import React from 'react'\n\nclass MemeGenerator extends React.Component{\n    constructor(){\n        super();\n        this.state= {\n            topText: '',\n            bottomText: '',\n            randomImg: 'https://imgflip.com/s/meme/Distracted-Boyfriend.jpg',\n            allMemeImages: [],\n            textColor: 'red'\n        }\n    }\n\n    componentDidMount(){\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const {memes} = response.data\n                console.log(typeof memes)\n                this.setState({allMemeImages: memes})\n            })\n            .catch(error => {\n                console.log(\"There was a eror\"+error)\n            })\n    }\n\n    handleChange = (event) => {\n        const {name, value} = event.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        var allMemes = this.state.allMemeImages\n        var totalNumberOfMemes = Object.keys(allMemes).length\n        var randomNumber = Math.floor(Math.random() * Math.floor(totalNumberOfMemes))\n        var randomMeme = Object.values(allMemes)[randomNumber-1]\n        var randomMemeImage = randomMeme.url\n        this.setState({\n            randomImg: randomMemeImage\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                    <label>Top Text</label>\n                    <input value= {this.state.topText} name=\"topText\" onChange = {this.handleChange}/>\n                    <label>Bottom Text</label>\n                    <input value= {this.state.bottomText} name=\"bottomText\" onChange = {this.handleChange}/>\n                    <label>Text Color</label>\n                    <select name=\"textColor\" onChange={this.handleChange}>\n                        <option value=\"red\">Red</option>\n                        <option value=\"black\">Black</option>\n                        <option value=\"white\">White</option>\n                        <option value=\"green\">Green</option>\n                        <option value=\"blue\">Blue</option>\n                    </select>\n                    <button style ={{background: \"chocolate\"}}>Change Image</button>\n                </form>\n                <br/>\n                <div className = \"memes\">\n                    <img src= {this.state.randomImg} alt =\"\" style={{display:\"block\", margin:\"0 auto\"}}/>\n                    <h2 className = \"top\" style={{color:this.state.textColor}}>{this.state.topText}</h2>\n                    <h2 className = \"bottom\" style={{color:this.state.textColor}}>{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n \n}\n\nexport default MemeGenerator","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport MemeGenerator from './MemeGenerator';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <br/>\n      <MemeGenerator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}